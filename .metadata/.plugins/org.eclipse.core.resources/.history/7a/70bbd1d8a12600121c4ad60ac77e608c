/**
 * za.co.coach.bluelabel.client<br>
 * 
 * <p><b>Title:</b> Client<br>
 * <b>Description:</b> <br>
 * <b>Copyright:</b> Copyright (c) 2012<br>
 * @author Kumbirai 'Coach' Mundangepfupfu
 * @date 04 Nov 2012 11:52:07 AM
 */
package za.co.coach.bluelabel.client;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import za.co.coach.bluelabel.entities.Person;

/**
 * <p>
 * <b>Purpose:</b><br>
 * <br>
 * 
 * Copyright Notice<br>
 * ================<br>
 * This file contains proprietary information. Copying or reproduction without
 * prior written approval is prohibited.<br>
 * Copyright (c) 2012<br>
 * 
 * <p>
 * <b>Title:</b> Client<br>
 * <b>Description:</b>
 * </p>
 * 
 * @author Kumbirai 'Coach' Mundangepfupfu<br>
 * @date 04 Nov 2012 11:52:07 AM<br>
 * @version 1.0<br>
 * 
 *          <b>Revision:</b>
 * 
 */
public class Client extends JFrame {
	private JTextField enterField;
	private JTextArea displayArea;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private Map<String, Serializable> message = new HashMap<String, Serializable>();
	private String theServer;
	private Socket client;

	public static void main(String[] args) {
		Client application;

		// if no command line args
		if (args.length == 0)
			application = new Client("127.0.0.1"); // connect to localhost
		else
			application = new Client(args[0]); // use args to connect

		application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		application.runClient();
	}

	public Client(String host) {
		super("Client");

		theServer = host;

		enterField = new JTextField();
		enterField.setEditable(false);
		enterField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				Map<String, Serializable> message = new HashMap<String, Serializable>();
				message.put("Action", "displayAll");
				sendData(message);
				enterField.setText("");
			}
		});

		add(enterField, BorderLayout.NORTH);

		displayArea = new JTextArea();
		add(new JScrollPane(displayArea), BorderLayout.CENTER);

		setSize(300, 150);
		setVisible(true);
	}

	public void runClient() {
		try {
			connectToServer();
			getStreams();
			processConnection();
		} catch (EOFException eofException) {
			displayMessage("\nClient terminated connection");
		} catch (IOException ioException) {
			ioException.printStackTrace();
		} finally {
			closeConnection();
		}
	}

	private void connectToServer() throws IOException {
		displayMessage("Attempting connection\n");

		// create Socket to make connection to server
		client = new Socket(InetAddress.getByName(theServer), 12345);

		// display connection information
		displayMessage("Connected to: " + client.getInetAddress().getHostName());
	}

	private void getStreams() throws IOException {
		// set up output stream for objects
		output = new ObjectOutputStream(client.getOutputStream());
		output.flush();

		// set up input stream for objects
		input = new ObjectInputStream(client.getInputStream());

		displayMessage("\nGot I/O streams\n");
	}

	private void processConnection() throws IOException {
		// enable enterField so client user can send messages
		setTextFieldEditable(true);

		do {
			try {
				message = (Map<String, Serializable>) input.readObject();
				String result = (String) message.get("Result");
				ArrayList<Person> results = (ArrayList<Person>) message.get("Object");
				System.out.println("[CLIENT] Message - action " + message + " " + result);
				displayMessage(result + "\n" + results);
			} catch (ClassNotFoundException classNotFoundException) {
				displayMessage("\nUnknown object type received");
			}

		} while (!message.equals("SERVER>>> TERMINATE"));
	}

	private void closeConnection() {
		displayMessage("\nClosing connection");
		setTextFieldEditable(false);

		try {
			output.close();
			input.close();
			client.close();
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	private void sendData(Map<String, Serializable> message) {
		try {
			output.writeObject(message);
			output.flush();
			displayMessage("\nCLIENT>>> " + message);
		} catch (IOException ioException) {
			displayArea.append("\nError writing object");
		}
	}

	private void displayMessage(final String messageToDisplay) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				displayArea.append(messageToDisplay);
			}
		});
	}

	private void setTextFieldEditable(final boolean editable) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				enterField.setEditable(editable);
			}
		});
	}
}